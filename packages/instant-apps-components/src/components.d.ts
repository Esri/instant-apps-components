/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ActiveTool, ControlPanelComponent, ExportOutput, ExtentSelector, IClassicEditor, IMeasureConfiguration, InstantAppsPopoverMessageOverrides, IPortal, LayerExpression, PopoverPlacement } from "./interfaces/interfaces";
import { EditorConfig } from "@ckeditor/ckeditor5-core/src/editor/editorconfig";
import { FilterMode } from "./components/instant-apps-interactive-legend/instant-apps-interactive-legend-classic/interfaces/interfaces";
import { AlignmentPositions } from "./components/instant-apps-landing-page/support/enum";
import { AppSettings, LocaleItem, LocaleSettingData } from "./components/instant-apps-language-translator/support/interfaces";
import { InstantAppsPopovers } from "./components/instant-apps-popovers/instant-apps-popovers";
import { LogicalPlacement } from "@esri/calcite-components/dist/types/utils/floating-ui";
import { ScoreboardItem, ScoreboardMode, ScoreboardPosition } from "./components/instant-apps-scoreboard/types/interfaces";
export { ActiveTool, ControlPanelComponent, ExportOutput, ExtentSelector, IClassicEditor, IMeasureConfiguration, InstantAppsPopoverMessageOverrides, IPortal, LayerExpression, PopoverPlacement } from "./interfaces/interfaces";
export { EditorConfig } from "@ckeditor/ckeditor5-core/src/editor/editorconfig";
export { FilterMode } from "./components/instant-apps-interactive-legend/instant-apps-interactive-legend-classic/interfaces/interfaces";
export { AlignmentPositions } from "./components/instant-apps-landing-page/support/enum";
export { AppSettings, LocaleItem, LocaleSettingData } from "./components/instant-apps-language-translator/support/interfaces";
export { InstantAppsPopovers } from "./components/instant-apps-popovers/instant-apps-popovers";
export { LogicalPlacement } from "@esri/calcite-components/dist/types/utils/floating-ui";
export { ScoreboardItem, ScoreboardMode, ScoreboardPosition } from "./components/instant-apps-scoreboard/types/interfaces";
export namespace Components {
    interface InstantAppsCkeditorWrapper {
        "config": EditorConfig;
        /**
          * Instance of text editor
         */
        "editorInstance": IClassicEditor;
        /**
          * Current value of text editor instance.
         */
        "value": string;
    }
    interface InstantAppsControlPanel {
        /**
          * Determine which widgets or components to display in the control panel
         */
        "components": ControlPanelComponent[];
        /**
          * A reference to the MapView or SceneView
         */
        "view": __esri.MapView | __esri.SceneView;
    }
    interface InstantAppsExport {
        /**
          * Passes the initial function to run when the Export button is clicked.
         */
        "beforeExport": () => Promise<void>;
        /**
          * Extra content that will be added below the view.
         */
        "extraContent"?: HTMLElement;
        /**
          * Custom label for `extraContent` checkbox.
         */
        "extraContentLabel"?: string;
        /**
          * Export header name, updated in input.
         */
        "headerTitle"?: string;
        /**
          * When `true`, `extraContent` HTML element is included in the PDF.
         */
        "includeExtraContent"?: boolean;
        /**
          * When `true`, legend is included in the export.
         */
        "includeLegend"?: boolean;
        /**
          * When `true`, map is included in the export.
         */
        "includeMap"?: boolean;
        /**
          * When `true`, popup is included in the export.
         */
        "includePopup"?: boolean;
        /**
          * Adjust the mask background color for when users are setting the map area
         */
        "maskBackground": string;
        /**
          * Adjust the mask border for when users are setting the map area
         */
        "maskBorder": string;
        /**
          * Renders tool as a popover with a trigger button, or inline to place in a custom container.
         */
        "mode": 'popover' | 'inline';
        /**
          * Output to use to set up export.
         */
        "output"?: ExportOutput;
        /**
          * Update popover button icon.
         */
        "popoverIcon"?: string;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
         */
        "popoverPlacement"?: PopoverPlacement;
        /**
          * Determines the type of positioning to use for the overlaid content. Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout. `"fixed"` value should be used to escape an overflowing parent container, or when the reference element's position CSS property is `"fixed"`.
         */
        "popoverPositioning"?: 'absolute' | 'fixed';
        /**
          * Adjusts the scale of the action button.
         */
        "scale"?: 's' | 'm' | 'l';
        /**
          * Show header title input in export tool.
         */
        "showHeaderTitle"?: boolean;
        /**
          * Show include legend checkbox in export tool.
         */
        "showIncludeLegend"?: boolean;
        /**
          * Show include map checkbox in export tool.
         */
        "showIncludeMap"?: boolean;
        /**
          * Show popup checkbox in export tool.
         */
        "showIncludePopup"?: boolean;
        /**
          * Show scale bar widget in map if view has it.
         */
        "showScaleBar"?: boolean;
        /**
          * A reference to the MapView or SceneView.
         */
        "view": __esri.MapView | __esri.SceneView | undefined;
    }
    interface InstantAppsFilterList {
        /**
          * Auto update URL with filter params.
         */
        "autoUpdateUrl"?: boolean;
        /**
          * Display close button in footer.
         */
        "closeBtn"?: boolean;
        /**
          * Close button onClick function.
         */
        "closeBtnOnClick"?: () => void;
        /**
          * Close button text.
         */
        "closeBtnText"?: string;
        /**
          * Determines the type of positioning to use for the overlaid content.
         */
        "comboboxOverlayPositioning"?: 'absolute' | 'fixed';
        /**
          * Turn on the ability to filter by extent.
         */
        "extentSelector"?: boolean;
        /**
          * Limits filtering options based on the view's extent geometry.
         */
        "extentSelectorConfig"?: ExtentSelector;
        /**
          * Number of active filters
         */
        "filterCount"?: number;
        /**
          * Use this to create filters that update a layer's definitionExpression.
         */
        "layerExpressions": LayerExpression[];
        /**
          * When `true`, the layer filter block is expanded.
         */
        "openFilters"?: boolean;
        /**
          * URL params set by using filters.
         */
        "urlParams"?: URLSearchParams;
        /**
          * A reference to the MapView or SceneView.
         */
        "view": __esri.MapView | __esri.SceneView;
        /**
          * Display zoom button.
         */
        "zoomBtn"?: boolean;
    }
    interface InstantAppsHeader {
        /**
          * Background color to display in header - accepts a hexadecimal value i.e. `#000000`.
         */
        "backgroundColor": string;
        /**
          * CSS styles to be used in conjunction with `custom-header-html`.
         */
        "customHeaderCss": string;
        /**
          * HTML code for custom headers.
         */
        "customHeaderHtml": string;
        /**
          * Font family to use for text
         */
        "fontFamily": string;
        /**
          * Change alignment of header.
         */
        "headerAlignment": 'left' | 'center' | 'right';
        /**
          * Display info button at the end of the title.
         */
        "infoButton": boolean;
        /**
          * Keeps track of the info 'open' state
         */
        "infoIsOpen": boolean;
        /**
          * Hover text for info button tooltip
         */
        "infoTitleText": string;
        /**
          * Image URL for logo. Displays at the start of the header.
         */
        "logoImage": string;
        /**
          * Alternate text for header logo.
         */
        "logoImageAltText": string;
        /**
          * Logo URL to link out to another page.
         */
        "logoLink": string;
        /**
          * Adjusts scale of logo image.
         */
        "logoScale": 's' | 'm' | 'l';
        /**
          * Mobile breakpoint value in pixels(px).
         */
        "mobileWidthBreakpoint": number;
        /**
          * Text color to display in header - accepts a hexadecimal value i.e. `#FFFFFF`.
         */
        "textColor": string;
        /**
          * Main text to display in header.
         */
        "titleText": string;
        /**
          * Url to link out to from title text
         */
        "titleTextLink": string;
    }
    interface InstantAppsInteractiveLegend {
        /**
          * Display the individual counts for categories and total counts for layers in the legend
         */
        "featureCount": boolean;
        /**
          * Use effects to differentiate between features that are included and excluded from legend filter results
         */
        "filterMode": FilterMode;
        /**
          * Reference to Map View
         */
        "view": __esri.MapView;
        /**
          * Displays ‘Zoom to’ button, updates the extent of the view based on the results from the legend
         */
        "zoomTo": boolean;
    }
    interface InstantAppsInteractiveLegendClassic {
        /**
          * Display individual counts and total counts for legend infos.
         */
        "featureCount": boolean;
        /**
          * Filter mode to use when filtering features.
         */
        "filterMode": FilterMode;
        /**
          * Legend View model from the 4.x ArcGIS API for JavaScript
         */
        "legendvm": __esri.LegendViewModel;
        "messages": any;
        /**
          * Displays 'Zoom To' button - updates the extent of the view based on the selected legend infos.
         */
        "zoomTo": boolean;
    }
    interface InstantAppsInteractiveLegendCount {
        "activeLayerInfo": __esri.ActiveLayerInfo;
        "categoryId": string;
        "infoIndex": number;
        "legendElement": __esri.LegendElement;
        "legendvm": __esri.LegendViewModel;
        "messages": any;
        "selected": boolean;
        "showTotal": boolean;
    }
    interface InstantAppsInteractiveLegendGroupLegendElement {
        "activeLayerInfo": __esri.ActiveLayerInfo;
        "featureCount": boolean;
        "isChild": boolean;
        "legendvm": __esri.LegendViewModel;
        "messages": any;
    }
    interface InstantAppsInteractiveLegendGroupLegendElementCaption {
        "activeLayerInfo": __esri.ActiveLayerInfo;
        "expanded": boolean;
        "featureCount": boolean;
        "isChild": boolean;
        "legendvm": __esri.LegendViewModel;
        "messages": any;
    }
    interface InstantAppsInteractiveLegendLayerElement {
        "activeLayerInfo": __esri.ActiveLayerInfo;
        "featureCount": boolean;
        "isChild": boolean;
        "legendvm": __esri.LegendViewModel;
        "messages": any;
    }
    interface InstantAppsInteractiveLegendLayerElementCaption {
        "activeLayerInfo": __esri.ActiveLayerInfo;
        "expanded": boolean;
        "featureCount": boolean;
        "isChild": boolean;
        "legendvm": __esri.LegendViewModel;
        "messages": any;
    }
    interface InstantAppsInteractiveLegendLegendElement {
        "activeLayerInfo": __esri.ActiveLayerInfo;
        "isChild": boolean;
        "isColorRamp": boolean;
        "isInteractive": boolean;
        "isRelationshipRamp": boolean;
        "isSizeRamp": boolean;
        "legendElement": __esri.LegendElement;
        "legendElementIndex": number;
        "legendvm": __esri.LegendViewModel;
        "messages": any;
        "titleText": string;
        "zoomTo": boolean;
    }
    interface InstantAppsInteractiveLegendLegendElementCaption {
        "activeLayerInfo": __esri.ActiveLayerInfo;
        "expanded": boolean;
        "isInteractive": boolean;
        "layer": __esri.FeatureLayer;
        "legendElement": __esri.LegendElement;
        "legendElementIndex": number;
        "legendvm": __esri.LegendViewModel;
        "messages": any;
        "titleText": string;
        "zoomTo": boolean;
    }
    interface InstantAppsInteractiveLegendRelationship {
        "activeLayerInfo": __esri.ActiveLayerInfo;
        "filterMode": FilterMode;
        "legendElement": __esri.RelationshipRampElement;
        "messages": any;
    }
    interface InstantAppsKeyboardShortcuts {
        /**
          * A reference to the MapView or SceneView
         */
        "view": __esri.MapView | __esri.SceneView;
    }
    interface InstantAppsLandingPage {
        /**
          * Controls the positioning of the text and image content. This accepts an array containing two values. Possible values for HorizontalAlignment: 'left', 'right', 'center'. Possible values for VeritcalAlignment: 'top', 'middle', 'bottom'.
         */
        "alignment": AlignmentPositions;
        /**
          * Displays a background image via URL
         */
        "backgroundImageSrc": string;
        /**
          * Description text.
         */
        "descriptionText": string;
        /**
          * Controls whether to enable/disable the transition animation the occurs when dismissing the landing page.
         */
        "disableTransition": boolean;
        /**
          * Add sign in functionality. Requires portal and oauthappid props.
         */
        "enableSignIn": boolean;
        /**
          * Scale of the entry button.
         */
        "entryButtonScale": 's' | 'm' | 'l';
        /**
          * Button text which closes/dismisses the landing page.
         */
        "entryButtonText": string;
        /**
          * Font family to use for text
         */
        "fontFamily": string;
        /**
          * Image/graphic that is positioned near the text content.
         */
        "iconImage": string;
        /**
          * Alternate text for `iconImage`.
         */
        "iconImageAltText": string;
        /**
          * Scale of icon image/graphic.
         */
        "iconImageScale": 's' | 'm' | 'l';
        /**
          * The registered application id, used to setup sign in capabilities.
         */
        "oauthappid": string;
        /**
          * Controls the open/close state of the landing page.
         */
        "open": boolean;
        /**
          * The apps Portal, used to setup sign in capabilities.
         */
        "portal": IPortal;
        /**
          * Subtitle text.
         */
        "subtitleText": string;
        /**
          * Title text.
         */
        "titleText": string;
    }
    interface InstantAppsLanguageSwitcher {
        /**
          * Defines the default language of the language switcher dropdown. Set internally if not defined.
         */
        "defaultLocale"?: string;
        /**
          * Icon to display.
         */
        "icon": string;
        /**
          * Data used to populate language switcher dropdown.
         */
        "locales": { locale: string; webmap?: string }[];
        /**
          * Instant App portal item - used to fetch it's associated portal item resource. The portal item resource will contain the user defined translated strings.
         */
        "portalItem": __esri.PortalItem;
        /**
          * Refreshes the component by fetching the latest translation data from the portal item resource.
         */
        "refresh": () => Promise<void>;
        /**
          * Reference to map view to switch web maps if present in locales.
         */
        "view"?: __esri.MapView | __esri.SceneView;
    }
    interface InstantAppsLanguageTranslator {
        /**
          * Object used to render each `instant-apps-translator-item`, containing either a `calcite-input` or rich text editor (handles HTML formatting); and, the languages to translate within the dropdown.
         */
        "appSettings": AppSettings;
        /**
          * Batch write data to associated portal item resource.
         */
        "batchWriteToPortalItemResource": (data: any) => Promise<void>;
        /**
          * Gets portal item resource containing the translation data.
         */
        "getPortalItemResource": () => Promise<__esri.PortalItemResource>;
        /**
          * Gets translation data for all languages and fields.
         */
        "getTranslationData": () => Promise<any>;
        /**
          * Specified languages that the user-defined strings will be translated in.
         */
        "locales": LocaleItem[];
        /**
          * Controls the open/close state of the modal.
         */
        "open": boolean;
        /**
          * Instant App portal item - used to fetch it's associated portal item resource. The portal item resource will contain the user-defined translated strings.
         */
        "portalItem": __esri.PortalItem;
        /**
          * Updates translation data for all languages and fields.
         */
        "setTranslationData": (data: any) => Promise<void>;
        /**
          * Function that is called when the value in a translated locale's input has changed. This function will have 4 arguments - fieldName, value, locale, and resource - and will return a promise. The callback function can be used to construct the data of key-value pairs that will be written to the portal item resource.
         */
        "translatedLocaleInputOnChangeCallback": (fieldName: string, value: string, locale: string, resource: __esri.PortalItemResource) => Promise<void>;
        /**
          * Function to be called when the value in a user locale input has changed. This function will have 2 arguments - fieldName and value - and will return a promise.
         */
        "userLocaleInputOnChangeCallback": (fieldName: string, value: string) => Promise<void>;
    }
    interface InstantAppsLanguageTranslatorItem {
        /**
          * Unique identifier tied to an associated setting in an app.
         */
        "fieldName": string;
        /**
          * Object containing data that describes the UI i.e. icon to indicate type of setting, label, value, etc.
         */
        "setting": LocaleSettingData;
        /**
          * Object containing labels of items in currently selected language.
         */
        "translatedLanguageLabels": { [key: string]: string };
        /**
          * Function that is called when the value in a translated locale's input has changed. This function will have 4 arguments - fieldName, value, locale, and resource - and will return a promise. The callback function can be used to construct the data of key-value pairs that will be written to the portal item resource.
         */
        "translatedLocaleInputOnChangeCallback": (fieldName: string, value: string, locale: string, resource: __esri.PortalItemResource) => Promise<void>;
        /**
          * Function to be called when the value in a user locale input has changed. This function will have 2 arguments - fieldName and value - and will return a promise.
         */
        "userLocaleInputOnChangeCallback": (fieldName: string, value: string) => Promise<void>;
    }
    interface InstantAppsLanguageTranslatorSearch {
        /**
          * Placeholder string for search input.
         */
        "t9nPlaceholder": string;
    }
    interface InstantAppsMeasurement {
        /**
          * Determine the tool that will be open on load
         */
        "activeToolType": ActiveTool;
        /**
          * Choose which unit will be used for the area tool by default
         */
        "areaUnit"?: __esri.AreaUnit;
        /**
          * When true the measure widget is closable
         */
        "closable": boolean;
        /**
          * Choose which formats to include as options while converting coordinates
         */
        "coordinateFormat"?: string;
        /**
          * Choose which unit will be used for the distance tool by default
         */
        "linearUnit"?: __esri.LengthUnit;
        /**
          * A reference to the MapView or SceneView
         */
        "view": __esri.MapView | __esri.SceneView;
    }
    interface InstantAppsMeasurementTool {
        "activeTool": ActiveTool;
        "measureConfiguration": IMeasureConfiguration;
        "view": __esri.MapView | __esri.SceneView;
    }
    interface InstantAppsPopover {
        "content": string;
        "disableAction": boolean;
        "imgAlt": string;
        "imgSrc": string;
        "index": number;
        "mediaSrc": string;
        "messageOverrides": InstantAppsPopoverMessageOverrides;
        "pagination": boolean;
        "parent": InstantAppsPopovers;
        "placement": LogicalPlacement;
        "popoverAction": (event: MouseEvent) => void;
        "popoverTitle": string;
        "refId": string;
        "referenceElement": string | HTMLElement;
        "subtitle": string;
    }
    interface InstantAppsPopovers {
        "beforeOpen": () => Promise<void>;
        "beginTour": () => Promise<void>;
        "close": (key: string) => Promise<void>;
        "currentId": string;
        "endTour": () => Promise<void>;
        "inTour": boolean;
        "instantAppsPopovers": Map<string, HTMLInstantAppsPopoverElement>;
        "open": (key: string) => Promise<void>;
    }
    interface InstantAppsScoreboard {
        /**
          * Controls the behavior to auto dock the scoreboard to the bottom in smaller parent containers/mobile devices.
         */
        "autoDockEnabled": boolean;
        /**
          * Optional geometry in which the statistics will be calculated. To re-calculate the scoreboard's statistics based on the current view extent, set this property to `null`.
         */
        "geometry": __esri.Geometry | null;
        /**
          * Number of scoreboard items that can be viewed at a time. Minimum: 2, Maximum : 6.
         */
        "itemLimit": number;
        /**
          * Data on layers, field attribute info, operations, for each scoreboard item
         */
        "items": ScoreboardItem[];
        /**
          * Mode of scoreboard i.e. 'floating' or 'pinned'.
         */
        "mode": ScoreboardMode;
        /**
          * Position of scoreboard i.e. 'bottom', 'left', or 'right'.
         */
        "position": ScoreboardPosition;
        /**
          * MapView or SceneView to reference extent, viewpoint, and layers in map to perform calculations.
         */
        "view": __esri.MapView | __esri.SceneView;
    }
    interface InstantAppsSignIn {
        "closeLandingPage": Function;
        /**
          * Landing page description text.
         */
        "descriptionText": string;
        /**
          * Set to `true` if app has landing page
         */
        "landingPage": boolean;
        /**
          * The registered application id, used to setup sign in capabilities.
         */
        "oauthappid": string;
        /**
          * Set to true to show the OAuth sign-in page in a popup window.
         */
        "openInPopup": boolean;
        /**
          * The apps Portal, used to setup sign in capabilities.
         */
        "portal": IPortal;
        /**
          * Landing page subtitle text.
         */
        "subtitleText": string;
        /**
          * Landing page title text.
         */
        "titleText": string;
        /**
          * Pick the look of the sign in/out component. `navigation` will put sign out in calcite-navigation-user. `avatar` will put sign out in calcite-avatar. `landingPage` is used for instant-apps-landing-page.
         */
        "type": 'navigation' | 'avatar' | 'landingPage';
    }
    interface InstantAppsSocialShare {
        /**
          * Auto update share URL.
         */
        "autoUpdateShareUrl": boolean;
        /**
          * Configure the default URL parameters that are appended to the generated share URL.
         */
        "defaultUrlParams": { center?: boolean; level?: boolean; viewpoint?: boolean; selectedFeature?: boolean; hiddenLayers?: boolean } | null;
        /**
          * Show/hide the tip text below the share options.
         */
        "displayTipText": boolean;
        /**
          * Show/hide the embed UI.
         */
        "embed": boolean;
        /**
          * Text to nest in embed iframe code.
         */
        "iframeInnerText": string;
        /**
          * Configures the placement of the success message popover for the 'Copy Link' button. See options here: https://github.com/Esri/calcite-components/blob/v1.0.0-beta.83/src/utils/popper.ts#L34
         */
        "inlineSuccessPopoverPlacement": LogicalPlacement;
        /**
          * Renders tool as a popover with a trigger button, or inline to place in a custom container.
         */
        "mode": 'popover' | 'inline';
        /**
          * Adjusts the scale of the popover button icon.
         */
        "popoverButtonIconScale": 's' | 'm' | 'l';
        /**
          * Adjusts the scale of the component.
         */
        "scale": 's' | 'm' | 'l';
        "shareButtonColor": 'inverse' | 'neutral';
        /**
          * Adjust scale of popover button
         */
        "shareButtonScale": 's' | 'm' | 'l';
        /**
          * Renders tool in popover mode with a trigger button or action
         */
        "shareButtonType": 'button' | 'action';
        /**
          * Display the share icons in a vertical or horizontal layout.
         */
        "shareIconsLayout": 'vertical' | 'horizontal';
        "shareText": string;
        /**
          * Generated share URL. Use this property to append custom URL parameters if needed.
         */
        "shareUrl": string;
        /**
          * Shortens generated URL.
         */
        "shortenShareUrl": boolean;
        /**
          * Show/hide social media icons.
         */
        "socialMedia": boolean;
        /**
          * Provides an alternate to the success.url message "App URL copied to clipboard."
         */
        "successMessage": string;
        /**
          * MapView or SceneView to reference when URL parameter values are generated, i.e. center, level, viewpoint, etc.
         */
        "view": __esri.MapView | __esri.SceneView;
    }
    interface InstantAppsSplash {
        /**
          * When `true`, disables the component's close button.
         */
        "closeButtonDisabled": boolean;
        /**
          * Content of splash screen.
         */
        "content": string;
        /**
          * Local storage key used to determine whether or not user has opted into "Don't show this again" checkbox.
         */
        "localStorageKey": string;
        /**
          * Controls the 'open' state of the modal element.
         */
        "open": boolean;
        /**
          * When `true`, disables the closing of the component when clicked outside.
         */
        "outsideCloseDisabled": boolean;
        /**
          * Primary button text.
         */
        "primaryButtonText": string;
        /**
          * When `true`, enables a secondary button at the component's footer.
         */
        "secondaryButton": boolean;
        /**
          * Callback function when secondary button is clicked.
         */
        "secondaryButtonCallback": () => Promise<void>;
        /**
          * Secondary button icon.
         */
        "secondaryButtonIcon": string;
        /**
          * Secondary button text.
         */
        "secondaryButtonText": string;
        /**
          * Title of splash screen.
         */
        "titleText": string;
    }
}
export interface InstantAppsCkeditorWrapperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInstantAppsCkeditorWrapperElement;
}
export interface InstantAppsExportCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInstantAppsExportElement;
}
export interface InstantAppsFilterListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInstantAppsFilterListElement;
}
export interface InstantAppsHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInstantAppsHeaderElement;
}
export interface InstantAppsInteractiveLegendGroupLegendElementCaptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInstantAppsInteractiveLegendGroupLegendElementCaptionElement;
}
export interface InstantAppsInteractiveLegendLayerElementCaptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInstantAppsInteractiveLegendLayerElementCaptionElement;
}
export interface InstantAppsInteractiveLegendLegendElementCaptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInstantAppsInteractiveLegendLegendElementCaptionElement;
}
export interface InstantAppsLandingPageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInstantAppsLandingPageElement;
}
export interface InstantAppsLanguageSwitcherCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInstantAppsLanguageSwitcherElement;
}
export interface InstantAppsLanguageTranslatorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInstantAppsLanguageTranslatorElement;
}
export interface InstantAppsLanguageTranslatorItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInstantAppsLanguageTranslatorItemElement;
}
export interface InstantAppsLanguageTranslatorSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInstantAppsLanguageTranslatorSearchElement;
}
export interface InstantAppsMeasurementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInstantAppsMeasurementElement;
}
export interface InstantAppsScoreboardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInstantAppsScoreboardElement;
}
export interface InstantAppsSplashCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLInstantAppsSplashElement;
}
declare global {
    interface HTMLInstantAppsCkeditorWrapperElementEventMap {
        "isFocused": { fieldName: string; isFocused: boolean };
        "dataChanged": string;
    }
    interface HTMLInstantAppsCkeditorWrapperElement extends Components.InstantAppsCkeditorWrapper, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInstantAppsCkeditorWrapperElementEventMap>(type: K, listener: (this: HTMLInstantAppsCkeditorWrapperElement, ev: InstantAppsCkeditorWrapperCustomEvent<HTMLInstantAppsCkeditorWrapperElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInstantAppsCkeditorWrapperElementEventMap>(type: K, listener: (this: HTMLInstantAppsCkeditorWrapperElement, ev: InstantAppsCkeditorWrapperCustomEvent<HTMLInstantAppsCkeditorWrapperElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInstantAppsCkeditorWrapperElement: {
        prototype: HTMLInstantAppsCkeditorWrapperElement;
        new (): HTMLInstantAppsCkeditorWrapperElement;
    };
    interface HTMLInstantAppsControlPanelElement extends Components.InstantAppsControlPanel, HTMLStencilElement {
    }
    var HTMLInstantAppsControlPanelElement: {
        prototype: HTMLInstantAppsControlPanelElement;
        new (): HTMLInstantAppsControlPanelElement;
    };
    interface HTMLInstantAppsExportElementEventMap {
        "exportOutputUpdated": void;
    }
    interface HTMLInstantAppsExportElement extends Components.InstantAppsExport, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInstantAppsExportElementEventMap>(type: K, listener: (this: HTMLInstantAppsExportElement, ev: InstantAppsExportCustomEvent<HTMLInstantAppsExportElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInstantAppsExportElementEventMap>(type: K, listener: (this: HTMLInstantAppsExportElement, ev: InstantAppsExportCustomEvent<HTMLInstantAppsExportElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInstantAppsExportElement: {
        prototype: HTMLInstantAppsExportElement;
        new (): HTMLInstantAppsExportElement;
    };
    interface HTMLInstantAppsFilterListElementEventMap {
        "filterListReset": void;
        "filterUpdate": void;
    }
    interface HTMLInstantAppsFilterListElement extends Components.InstantAppsFilterList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInstantAppsFilterListElementEventMap>(type: K, listener: (this: HTMLInstantAppsFilterListElement, ev: InstantAppsFilterListCustomEvent<HTMLInstantAppsFilterListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInstantAppsFilterListElementEventMap>(type: K, listener: (this: HTMLInstantAppsFilterListElement, ev: InstantAppsFilterListCustomEvent<HTMLInstantAppsFilterListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInstantAppsFilterListElement: {
        prototype: HTMLInstantAppsFilterListElement;
        new (): HTMLInstantAppsFilterListElement;
    };
    interface HTMLInstantAppsHeaderElementEventMap {
        "infoIsOpenChanged": boolean;
    }
    interface HTMLInstantAppsHeaderElement extends Components.InstantAppsHeader, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInstantAppsHeaderElementEventMap>(type: K, listener: (this: HTMLInstantAppsHeaderElement, ev: InstantAppsHeaderCustomEvent<HTMLInstantAppsHeaderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInstantAppsHeaderElementEventMap>(type: K, listener: (this: HTMLInstantAppsHeaderElement, ev: InstantAppsHeaderCustomEvent<HTMLInstantAppsHeaderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInstantAppsHeaderElement: {
        prototype: HTMLInstantAppsHeaderElement;
        new (): HTMLInstantAppsHeaderElement;
    };
    interface HTMLInstantAppsInteractiveLegendElement extends Components.InstantAppsInteractiveLegend, HTMLStencilElement {
    }
    var HTMLInstantAppsInteractiveLegendElement: {
        prototype: HTMLInstantAppsInteractiveLegendElement;
        new (): HTMLInstantAppsInteractiveLegendElement;
    };
    interface HTMLInstantAppsInteractiveLegendClassicElement extends Components.InstantAppsInteractiveLegendClassic, HTMLStencilElement {
    }
    var HTMLInstantAppsInteractiveLegendClassicElement: {
        prototype: HTMLInstantAppsInteractiveLegendClassicElement;
        new (): HTMLInstantAppsInteractiveLegendClassicElement;
    };
    interface HTMLInstantAppsInteractiveLegendCountElement extends Components.InstantAppsInteractiveLegendCount, HTMLStencilElement {
    }
    var HTMLInstantAppsInteractiveLegendCountElement: {
        prototype: HTMLInstantAppsInteractiveLegendCountElement;
        new (): HTMLInstantAppsInteractiveLegendCountElement;
    };
    interface HTMLInstantAppsInteractiveLegendGroupLegendElementElement extends Components.InstantAppsInteractiveLegendGroupLegendElement, HTMLStencilElement {
    }
    var HTMLInstantAppsInteractiveLegendGroupLegendElementElement: {
        prototype: HTMLInstantAppsInteractiveLegendGroupLegendElementElement;
        new (): HTMLInstantAppsInteractiveLegendGroupLegendElementElement;
    };
    interface HTMLInstantAppsInteractiveLegendGroupLegendElementCaptionElementEventMap {
        "groupLayerCaptionElementExpandUpdated": boolean;
    }
    interface HTMLInstantAppsInteractiveLegendGroupLegendElementCaptionElement extends Components.InstantAppsInteractiveLegendGroupLegendElementCaption, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInstantAppsInteractiveLegendGroupLegendElementCaptionElementEventMap>(type: K, listener: (this: HTMLInstantAppsInteractiveLegendGroupLegendElementCaptionElement, ev: InstantAppsInteractiveLegendGroupLegendElementCaptionCustomEvent<HTMLInstantAppsInteractiveLegendGroupLegendElementCaptionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInstantAppsInteractiveLegendGroupLegendElementCaptionElementEventMap>(type: K, listener: (this: HTMLInstantAppsInteractiveLegendGroupLegendElementCaptionElement, ev: InstantAppsInteractiveLegendGroupLegendElementCaptionCustomEvent<HTMLInstantAppsInteractiveLegendGroupLegendElementCaptionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInstantAppsInteractiveLegendGroupLegendElementCaptionElement: {
        prototype: HTMLInstantAppsInteractiveLegendGroupLegendElementCaptionElement;
        new (): HTMLInstantAppsInteractiveLegendGroupLegendElementCaptionElement;
    };
    interface HTMLInstantAppsInteractiveLegendLayerElementElement extends Components.InstantAppsInteractiveLegendLayerElement, HTMLStencilElement {
    }
    var HTMLInstantAppsInteractiveLegendLayerElementElement: {
        prototype: HTMLInstantAppsInteractiveLegendLayerElementElement;
        new (): HTMLInstantAppsInteractiveLegendLayerElementElement;
    };
    interface HTMLInstantAppsInteractiveLegendLayerElementCaptionElementEventMap {
        "layerCaptionElementExpandUpdated": boolean;
    }
    interface HTMLInstantAppsInteractiveLegendLayerElementCaptionElement extends Components.InstantAppsInteractiveLegendLayerElementCaption, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInstantAppsInteractiveLegendLayerElementCaptionElementEventMap>(type: K, listener: (this: HTMLInstantAppsInteractiveLegendLayerElementCaptionElement, ev: InstantAppsInteractiveLegendLayerElementCaptionCustomEvent<HTMLInstantAppsInteractiveLegendLayerElementCaptionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInstantAppsInteractiveLegendLayerElementCaptionElementEventMap>(type: K, listener: (this: HTMLInstantAppsInteractiveLegendLayerElementCaptionElement, ev: InstantAppsInteractiveLegendLayerElementCaptionCustomEvent<HTMLInstantAppsInteractiveLegendLayerElementCaptionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInstantAppsInteractiveLegendLayerElementCaptionElement: {
        prototype: HTMLInstantAppsInteractiveLegendLayerElementCaptionElement;
        new (): HTMLInstantAppsInteractiveLegendLayerElementCaptionElement;
    };
    interface HTMLInstantAppsInteractiveLegendLegendElementElement extends Components.InstantAppsInteractiveLegendLegendElement, HTMLStencilElement {
    }
    var HTMLInstantAppsInteractiveLegendLegendElementElement: {
        prototype: HTMLInstantAppsInteractiveLegendLegendElementElement;
        new (): HTMLInstantAppsInteractiveLegendLegendElementElement;
    };
    interface HTMLInstantAppsInteractiveLegendLegendElementCaptionElementEventMap {
        "showAllSelected": boolean;
        "legendLayerExpandUpdated": boolean;
    }
    interface HTMLInstantAppsInteractiveLegendLegendElementCaptionElement extends Components.InstantAppsInteractiveLegendLegendElementCaption, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInstantAppsInteractiveLegendLegendElementCaptionElementEventMap>(type: K, listener: (this: HTMLInstantAppsInteractiveLegendLegendElementCaptionElement, ev: InstantAppsInteractiveLegendLegendElementCaptionCustomEvent<HTMLInstantAppsInteractiveLegendLegendElementCaptionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInstantAppsInteractiveLegendLegendElementCaptionElementEventMap>(type: K, listener: (this: HTMLInstantAppsInteractiveLegendLegendElementCaptionElement, ev: InstantAppsInteractiveLegendLegendElementCaptionCustomEvent<HTMLInstantAppsInteractiveLegendLegendElementCaptionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInstantAppsInteractiveLegendLegendElementCaptionElement: {
        prototype: HTMLInstantAppsInteractiveLegendLegendElementCaptionElement;
        new (): HTMLInstantAppsInteractiveLegendLegendElementCaptionElement;
    };
    interface HTMLInstantAppsInteractiveLegendRelationshipElement extends Components.InstantAppsInteractiveLegendRelationship, HTMLStencilElement {
    }
    var HTMLInstantAppsInteractiveLegendRelationshipElement: {
        prototype: HTMLInstantAppsInteractiveLegendRelationshipElement;
        new (): HTMLInstantAppsInteractiveLegendRelationshipElement;
    };
    interface HTMLInstantAppsKeyboardShortcutsElement extends Components.InstantAppsKeyboardShortcuts, HTMLStencilElement {
    }
    var HTMLInstantAppsKeyboardShortcutsElement: {
        prototype: HTMLInstantAppsKeyboardShortcutsElement;
        new (): HTMLInstantAppsKeyboardShortcutsElement;
    };
    interface HTMLInstantAppsLandingPageElementEventMap {
        "landingPageOpen": void;
        "landingPageClose": void;
    }
    interface HTMLInstantAppsLandingPageElement extends Components.InstantAppsLandingPage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInstantAppsLandingPageElementEventMap>(type: K, listener: (this: HTMLInstantAppsLandingPageElement, ev: InstantAppsLandingPageCustomEvent<HTMLInstantAppsLandingPageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInstantAppsLandingPageElementEventMap>(type: K, listener: (this: HTMLInstantAppsLandingPageElement, ev: InstantAppsLandingPageCustomEvent<HTMLInstantAppsLandingPageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInstantAppsLandingPageElement: {
        prototype: HTMLInstantAppsLandingPageElement;
        new (): HTMLInstantAppsLandingPageElement;
    };
    interface HTMLInstantAppsLanguageSwitcherElementEventMap {
        "selectedLanguageUpdated": {
    locale: string;
    data?: {
      [key: string]: string;
    };
  };
    }
    interface HTMLInstantAppsLanguageSwitcherElement extends Components.InstantAppsLanguageSwitcher, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInstantAppsLanguageSwitcherElementEventMap>(type: K, listener: (this: HTMLInstantAppsLanguageSwitcherElement, ev: InstantAppsLanguageSwitcherCustomEvent<HTMLInstantAppsLanguageSwitcherElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInstantAppsLanguageSwitcherElementEventMap>(type: K, listener: (this: HTMLInstantAppsLanguageSwitcherElement, ev: InstantAppsLanguageSwitcherCustomEvent<HTMLInstantAppsLanguageSwitcherElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInstantAppsLanguageSwitcherElement: {
        prototype: HTMLInstantAppsLanguageSwitcherElement;
        new (): HTMLInstantAppsLanguageSwitcherElement;
    };
    interface HTMLInstantAppsLanguageTranslatorElementEventMap {
        "translatorDataUpdated": string;
    }
    interface HTMLInstantAppsLanguageTranslatorElement extends Components.InstantAppsLanguageTranslator, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInstantAppsLanguageTranslatorElementEventMap>(type: K, listener: (this: HTMLInstantAppsLanguageTranslatorElement, ev: InstantAppsLanguageTranslatorCustomEvent<HTMLInstantAppsLanguageTranslatorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInstantAppsLanguageTranslatorElementEventMap>(type: K, listener: (this: HTMLInstantAppsLanguageTranslatorElement, ev: InstantAppsLanguageTranslatorCustomEvent<HTMLInstantAppsLanguageTranslatorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInstantAppsLanguageTranslatorElement: {
        prototype: HTMLInstantAppsLanguageTranslatorElement;
        new (): HTMLInstantAppsLanguageTranslatorElement;
    };
    interface HTMLInstantAppsLanguageTranslatorItemElementEventMap {
        "translatorItemDataUpdated": void;
    }
    interface HTMLInstantAppsLanguageTranslatorItemElement extends Components.InstantAppsLanguageTranslatorItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInstantAppsLanguageTranslatorItemElementEventMap>(type: K, listener: (this: HTMLInstantAppsLanguageTranslatorItemElement, ev: InstantAppsLanguageTranslatorItemCustomEvent<HTMLInstantAppsLanguageTranslatorItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInstantAppsLanguageTranslatorItemElementEventMap>(type: K, listener: (this: HTMLInstantAppsLanguageTranslatorItemElement, ev: InstantAppsLanguageTranslatorItemCustomEvent<HTMLInstantAppsLanguageTranslatorItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInstantAppsLanguageTranslatorItemElement: {
        prototype: HTMLInstantAppsLanguageTranslatorItemElement;
        new (): HTMLInstantAppsLanguageTranslatorItemElement;
    };
    interface HTMLInstantAppsLanguageTranslatorSearchElementEventMap {
        "suggestionSelected": string;
    }
    interface HTMLInstantAppsLanguageTranslatorSearchElement extends Components.InstantAppsLanguageTranslatorSearch, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInstantAppsLanguageTranslatorSearchElementEventMap>(type: K, listener: (this: HTMLInstantAppsLanguageTranslatorSearchElement, ev: InstantAppsLanguageTranslatorSearchCustomEvent<HTMLInstantAppsLanguageTranslatorSearchElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInstantAppsLanguageTranslatorSearchElementEventMap>(type: K, listener: (this: HTMLInstantAppsLanguageTranslatorSearchElement, ev: InstantAppsLanguageTranslatorSearchCustomEvent<HTMLInstantAppsLanguageTranslatorSearchElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInstantAppsLanguageTranslatorSearchElement: {
        prototype: HTMLInstantAppsLanguageTranslatorSearchElement;
        new (): HTMLInstantAppsLanguageTranslatorSearchElement;
    };
    interface HTMLInstantAppsMeasurementElementEventMap {
        "measureActive": boolean;
    }
    interface HTMLInstantAppsMeasurementElement extends Components.InstantAppsMeasurement, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInstantAppsMeasurementElementEventMap>(type: K, listener: (this: HTMLInstantAppsMeasurementElement, ev: InstantAppsMeasurementCustomEvent<HTMLInstantAppsMeasurementElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInstantAppsMeasurementElementEventMap>(type: K, listener: (this: HTMLInstantAppsMeasurementElement, ev: InstantAppsMeasurementCustomEvent<HTMLInstantAppsMeasurementElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInstantAppsMeasurementElement: {
        prototype: HTMLInstantAppsMeasurementElement;
        new (): HTMLInstantAppsMeasurementElement;
    };
    interface HTMLInstantAppsMeasurementToolElement extends Components.InstantAppsMeasurementTool, HTMLStencilElement {
    }
    var HTMLInstantAppsMeasurementToolElement: {
        prototype: HTMLInstantAppsMeasurementToolElement;
        new (): HTMLInstantAppsMeasurementToolElement;
    };
    interface HTMLInstantAppsPopoverElement extends Components.InstantAppsPopover, HTMLStencilElement {
    }
    var HTMLInstantAppsPopoverElement: {
        prototype: HTMLInstantAppsPopoverElement;
        new (): HTMLInstantAppsPopoverElement;
    };
    interface HTMLInstantAppsPopoversElement extends Components.InstantAppsPopovers, HTMLStencilElement {
    }
    var HTMLInstantAppsPopoversElement: {
        prototype: HTMLInstantAppsPopoversElement;
        new (): HTMLInstantAppsPopoversElement;
    };
    interface HTMLInstantAppsScoreboardElementEventMap {
        "scoreboardItemsUpdated": ScoreboardItem[];
    }
    interface HTMLInstantAppsScoreboardElement extends Components.InstantAppsScoreboard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInstantAppsScoreboardElementEventMap>(type: K, listener: (this: HTMLInstantAppsScoreboardElement, ev: InstantAppsScoreboardCustomEvent<HTMLInstantAppsScoreboardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInstantAppsScoreboardElementEventMap>(type: K, listener: (this: HTMLInstantAppsScoreboardElement, ev: InstantAppsScoreboardCustomEvent<HTMLInstantAppsScoreboardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInstantAppsScoreboardElement: {
        prototype: HTMLInstantAppsScoreboardElement;
        new (): HTMLInstantAppsScoreboardElement;
    };
    interface HTMLInstantAppsSignInElement extends Components.InstantAppsSignIn, HTMLStencilElement {
    }
    var HTMLInstantAppsSignInElement: {
        prototype: HTMLInstantAppsSignInElement;
        new (): HTMLInstantAppsSignInElement;
    };
    interface HTMLInstantAppsSocialShareElement extends Components.InstantAppsSocialShare, HTMLStencilElement {
    }
    var HTMLInstantAppsSocialShareElement: {
        prototype: HTMLInstantAppsSocialShareElement;
        new (): HTMLInstantAppsSocialShareElement;
    };
    interface HTMLInstantAppsSplashElementEventMap {
        "splashClose": void;
    }
    interface HTMLInstantAppsSplashElement extends Components.InstantAppsSplash, HTMLStencilElement {
        addEventListener<K extends keyof HTMLInstantAppsSplashElementEventMap>(type: K, listener: (this: HTMLInstantAppsSplashElement, ev: InstantAppsSplashCustomEvent<HTMLInstantAppsSplashElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLInstantAppsSplashElementEventMap>(type: K, listener: (this: HTMLInstantAppsSplashElement, ev: InstantAppsSplashCustomEvent<HTMLInstantAppsSplashElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLInstantAppsSplashElement: {
        prototype: HTMLInstantAppsSplashElement;
        new (): HTMLInstantAppsSplashElement;
    };
    interface HTMLElementTagNameMap {
        "instant-apps-ckeditor-wrapper": HTMLInstantAppsCkeditorWrapperElement;
        "instant-apps-control-panel": HTMLInstantAppsControlPanelElement;
        "instant-apps-export": HTMLInstantAppsExportElement;
        "instant-apps-filter-list": HTMLInstantAppsFilterListElement;
        "instant-apps-header": HTMLInstantAppsHeaderElement;
        "instant-apps-interactive-legend": HTMLInstantAppsInteractiveLegendElement;
        "instant-apps-interactive-legend-classic": HTMLInstantAppsInteractiveLegendClassicElement;
        "instant-apps-interactive-legend-count": HTMLInstantAppsInteractiveLegendCountElement;
        "instant-apps-interactive-legend-group-legend-element": HTMLInstantAppsInteractiveLegendGroupLegendElementElement;
        "instant-apps-interactive-legend-group-legend-element-caption": HTMLInstantAppsInteractiveLegendGroupLegendElementCaptionElement;
        "instant-apps-interactive-legend-layer-element": HTMLInstantAppsInteractiveLegendLayerElementElement;
        "instant-apps-interactive-legend-layer-element-caption": HTMLInstantAppsInteractiveLegendLayerElementCaptionElement;
        "instant-apps-interactive-legend-legend-element": HTMLInstantAppsInteractiveLegendLegendElementElement;
        "instant-apps-interactive-legend-legend-element-caption": HTMLInstantAppsInteractiveLegendLegendElementCaptionElement;
        "instant-apps-interactive-legend-relationship": HTMLInstantAppsInteractiveLegendRelationshipElement;
        "instant-apps-keyboard-shortcuts": HTMLInstantAppsKeyboardShortcutsElement;
        "instant-apps-landing-page": HTMLInstantAppsLandingPageElement;
        "instant-apps-language-switcher": HTMLInstantAppsLanguageSwitcherElement;
        "instant-apps-language-translator": HTMLInstantAppsLanguageTranslatorElement;
        "instant-apps-language-translator-item": HTMLInstantAppsLanguageTranslatorItemElement;
        "instant-apps-language-translator-search": HTMLInstantAppsLanguageTranslatorSearchElement;
        "instant-apps-measurement": HTMLInstantAppsMeasurementElement;
        "instant-apps-measurement-tool": HTMLInstantAppsMeasurementToolElement;
        "instant-apps-popover": HTMLInstantAppsPopoverElement;
        "instant-apps-popovers": HTMLInstantAppsPopoversElement;
        "instant-apps-scoreboard": HTMLInstantAppsScoreboardElement;
        "instant-apps-sign-in": HTMLInstantAppsSignInElement;
        "instant-apps-social-share": HTMLInstantAppsSocialShareElement;
        "instant-apps-splash": HTMLInstantAppsSplashElement;
    }
}
declare namespace LocalJSX {
    interface InstantAppsCkeditorWrapper {
        "config"?: EditorConfig;
        /**
          * Instance of text editor
         */
        "editorInstance"?: IClassicEditor;
        "onDataChanged"?: (event: InstantAppsCkeditorWrapperCustomEvent<string>) => void;
        "onIsFocused"?: (event: InstantAppsCkeditorWrapperCustomEvent<{ fieldName: string; isFocused: boolean }>) => void;
        /**
          * Current value of text editor instance.
         */
        "value"?: string;
    }
    interface InstantAppsControlPanel {
        /**
          * Determine which widgets or components to display in the control panel
         */
        "components"?: ControlPanelComponent[];
        /**
          * A reference to the MapView or SceneView
         */
        "view"?: __esri.MapView | __esri.SceneView;
    }
    interface InstantAppsExport {
        /**
          * Passes the initial function to run when the Export button is clicked.
         */
        "beforeExport"?: () => Promise<void>;
        /**
          * Extra content that will be added below the view.
         */
        "extraContent"?: HTMLElement;
        /**
          * Custom label for `extraContent` checkbox.
         */
        "extraContentLabel"?: string;
        /**
          * Export header name, updated in input.
         */
        "headerTitle"?: string;
        /**
          * When `true`, `extraContent` HTML element is included in the PDF.
         */
        "includeExtraContent"?: boolean;
        /**
          * When `true`, legend is included in the export.
         */
        "includeLegend"?: boolean;
        /**
          * When `true`, map is included in the export.
         */
        "includeMap"?: boolean;
        /**
          * When `true`, popup is included in the export.
         */
        "includePopup"?: boolean;
        /**
          * Adjust the mask background color for when users are setting the map area
         */
        "maskBackground"?: string;
        /**
          * Adjust the mask border for when users are setting the map area
         */
        "maskBorder"?: string;
        /**
          * Renders tool as a popover with a trigger button, or inline to place in a custom container.
         */
        "mode"?: 'popover' | 'inline';
        /**
          * Emits when the instant-apps-export's output prop is updated after the "Export" button is clicked.
         */
        "onExportOutputUpdated"?: (event: InstantAppsExportCustomEvent<void>) => void;
        /**
          * Output to use to set up export.
         */
        "output"?: ExportOutput;
        /**
          * Update popover button icon.
         */
        "popoverIcon"?: string;
        /**
          * Determines where the component will be positioned relative to the `referenceElement`.
         */
        "popoverPlacement"?: PopoverPlacement;
        /**
          * Determines the type of positioning to use for the overlaid content. Using `"absolute"` will work for most cases. The component will be positioned inside of overflowing parent containers and will affect the container's layout. `"fixed"` value should be used to escape an overflowing parent container, or when the reference element's position CSS property is `"fixed"`.
         */
        "popoverPositioning"?: 'absolute' | 'fixed';
        /**
          * Adjusts the scale of the action button.
         */
        "scale"?: 's' | 'm' | 'l';
        /**
          * Show header title input in export tool.
         */
        "showHeaderTitle"?: boolean;
        /**
          * Show include legend checkbox in export tool.
         */
        "showIncludeLegend"?: boolean;
        /**
          * Show include map checkbox in export tool.
         */
        "showIncludeMap"?: boolean;
        /**
          * Show popup checkbox in export tool.
         */
        "showIncludePopup"?: boolean;
        /**
          * Show scale bar widget in map if view has it.
         */
        "showScaleBar"?: boolean;
        /**
          * A reference to the MapView or SceneView.
         */
        "view"?: __esri.MapView | __esri.SceneView | undefined;
    }
    interface InstantAppsFilterList {
        /**
          * Auto update URL with filter params.
         */
        "autoUpdateUrl"?: boolean;
        /**
          * Display close button in footer.
         */
        "closeBtn"?: boolean;
        /**
          * Close button onClick function.
         */
        "closeBtnOnClick"?: () => void;
        /**
          * Close button text.
         */
        "closeBtnText"?: string;
        /**
          * Determines the type of positioning to use for the overlaid content.
         */
        "comboboxOverlayPositioning"?: 'absolute' | 'fixed';
        /**
          * Turn on the ability to filter by extent.
         */
        "extentSelector"?: boolean;
        /**
          * Limits filtering options based on the view's extent geometry.
         */
        "extentSelectorConfig"?: ExtentSelector;
        /**
          * Number of active filters
         */
        "filterCount"?: number;
        /**
          * Use this to create filters that update a layer's definitionExpression.
         */
        "layerExpressions"?: LayerExpression[];
        /**
          * Emits when the reset button is pushed.
         */
        "onFilterListReset"?: (event: InstantAppsFilterListCustomEvent<void>) => void;
        /**
          * Emits when the filter is updated.
         */
        "onFilterUpdate"?: (event: InstantAppsFilterListCustomEvent<void>) => void;
        /**
          * When `true`, the layer filter block is expanded.
         */
        "openFilters"?: boolean;
        /**
          * URL params set by using filters.
         */
        "urlParams"?: URLSearchParams;
        /**
          * A reference to the MapView or SceneView.
         */
        "view"?: __esri.MapView | __esri.SceneView;
        /**
          * Display zoom button.
         */
        "zoomBtn"?: boolean;
    }
    interface InstantAppsHeader {
        /**
          * Background color to display in header - accepts a hexadecimal value i.e. `#000000`.
         */
        "backgroundColor"?: string;
        /**
          * CSS styles to be used in conjunction with `custom-header-html`.
         */
        "customHeaderCss"?: string;
        /**
          * HTML code for custom headers.
         */
        "customHeaderHtml"?: string;
        /**
          * Font family to use for text
         */
        "fontFamily"?: string;
        /**
          * Change alignment of header.
         */
        "headerAlignment"?: 'left' | 'center' | 'right';
        /**
          * Display info button at the end of the title.
         */
        "infoButton"?: boolean;
        /**
          * Keeps track of the info 'open' state
         */
        "infoIsOpen"?: boolean;
        /**
          * Hover text for info button tooltip
         */
        "infoTitleText"?: string;
        /**
          * Image URL for logo. Displays at the start of the header.
         */
        "logoImage"?: string;
        /**
          * Alternate text for header logo.
         */
        "logoImageAltText"?: string;
        /**
          * Logo URL to link out to another page.
         */
        "logoLink"?: string;
        /**
          * Adjusts scale of logo image.
         */
        "logoScale"?: 's' | 'm' | 'l';
        /**
          * Mobile breakpoint value in pixels(px).
         */
        "mobileWidthBreakpoint"?: number;
        /**
          * Fires when the info button is clicked.
         */
        "onInfoIsOpenChanged"?: (event: InstantAppsHeaderCustomEvent<boolean>) => void;
        /**
          * Text color to display in header - accepts a hexadecimal value i.e. `#FFFFFF`.
         */
        "textColor"?: string;
        /**
          * Main text to display in header.
         */
        "titleText"?: string;
        /**
          * Url to link out to from title text
         */
        "titleTextLink"?: string;
    }
    interface InstantAppsInteractiveLegend {
        /**
          * Display the individual counts for categories and total counts for layers in the legend
         */
        "featureCount"?: boolean;
        /**
          * Use effects to differentiate between features that are included and excluded from legend filter results
         */
        "filterMode"?: FilterMode;
        /**
          * Reference to Map View
         */
        "view"?: __esri.MapView;
        /**
          * Displays ‘Zoom to’ button, updates the extent of the view based on the results from the legend
         */
        "zoomTo"?: boolean;
    }
    interface InstantAppsInteractiveLegendClassic {
        /**
          * Display individual counts and total counts for legend infos.
         */
        "featureCount"?: boolean;
        /**
          * Filter mode to use when filtering features.
         */
        "filterMode"?: FilterMode;
        /**
          * Legend View model from the 4.x ArcGIS API for JavaScript
         */
        "legendvm"?: __esri.LegendViewModel;
        "messages"?: any;
        /**
          * Displays 'Zoom To' button - updates the extent of the view based on the selected legend infos.
         */
        "zoomTo"?: boolean;
    }
    interface InstantAppsInteractiveLegendCount {
        "activeLayerInfo"?: __esri.ActiveLayerInfo;
        "categoryId"?: string;
        "infoIndex"?: number;
        "legendElement"?: __esri.LegendElement;
        "legendvm"?: __esri.LegendViewModel;
        "messages"?: any;
        "selected"?: boolean;
        "showTotal"?: boolean;
    }
    interface InstantAppsInteractiveLegendGroupLegendElement {
        "activeLayerInfo"?: __esri.ActiveLayerInfo;
        "featureCount"?: boolean;
        "isChild"?: boolean;
        "legendvm"?: __esri.LegendViewModel;
        "messages"?: any;
    }
    interface InstantAppsInteractiveLegendGroupLegendElementCaption {
        "activeLayerInfo"?: __esri.ActiveLayerInfo;
        "expanded"?: boolean;
        "featureCount"?: boolean;
        "isChild"?: boolean;
        "legendvm"?: __esri.LegendViewModel;
        "messages"?: any;
        "onGroupLayerCaptionElementExpandUpdated"?: (event: InstantAppsInteractiveLegendGroupLegendElementCaptionCustomEvent<boolean>) => void;
    }
    interface InstantAppsInteractiveLegendLayerElement {
        "activeLayerInfo"?: __esri.ActiveLayerInfo;
        "featureCount"?: boolean;
        "isChild"?: boolean;
        "legendvm"?: __esri.LegendViewModel;
        "messages"?: any;
    }
    interface InstantAppsInteractiveLegendLayerElementCaption {
        "activeLayerInfo"?: __esri.ActiveLayerInfo;
        "expanded"?: boolean;
        "featureCount"?: boolean;
        "isChild"?: boolean;
        "legendvm"?: __esri.LegendViewModel;
        "messages"?: any;
        "onLayerCaptionElementExpandUpdated"?: (event: InstantAppsInteractiveLegendLayerElementCaptionCustomEvent<boolean>) => void;
    }
    interface InstantAppsInteractiveLegendLegendElement {
        "activeLayerInfo"?: __esri.ActiveLayerInfo;
        "isChild"?: boolean;
        "isColorRamp"?: boolean;
        "isInteractive"?: boolean;
        "isRelationshipRamp"?: boolean;
        "isSizeRamp"?: boolean;
        "legendElement"?: __esri.LegendElement;
        "legendElementIndex"?: number;
        "legendvm"?: __esri.LegendViewModel;
        "messages"?: any;
        "titleText"?: string;
        "zoomTo"?: boolean;
    }
    interface InstantAppsInteractiveLegendLegendElementCaption {
        "activeLayerInfo"?: __esri.ActiveLayerInfo;
        "expanded"?: boolean;
        "isInteractive"?: boolean;
        "layer"?: __esri.FeatureLayer;
        "legendElement"?: __esri.LegendElement;
        "legendElementIndex"?: number;
        "legendvm"?: __esri.LegendViewModel;
        "messages"?: any;
        "onLegendLayerExpandUpdated"?: (event: InstantAppsInteractiveLegendLegendElementCaptionCustomEvent<boolean>) => void;
        "onShowAllSelected"?: (event: InstantAppsInteractiveLegendLegendElementCaptionCustomEvent<boolean>) => void;
        "titleText"?: string;
        "zoomTo"?: boolean;
    }
    interface InstantAppsInteractiveLegendRelationship {
        "activeLayerInfo"?: __esri.ActiveLayerInfo;
        "filterMode"?: FilterMode;
        "legendElement"?: __esri.RelationshipRampElement;
        "messages"?: any;
    }
    interface InstantAppsKeyboardShortcuts {
        /**
          * A reference to the MapView or SceneView
         */
        "view"?: __esri.MapView | __esri.SceneView;
    }
    interface InstantAppsLandingPage {
        /**
          * Controls the positioning of the text and image content. This accepts an array containing two values. Possible values for HorizontalAlignment: 'left', 'right', 'center'. Possible values for VeritcalAlignment: 'top', 'middle', 'bottom'.
         */
        "alignment"?: AlignmentPositions;
        /**
          * Displays a background image via URL
         */
        "backgroundImageSrc"?: string;
        /**
          * Description text.
         */
        "descriptionText"?: string;
        /**
          * Controls whether to enable/disable the transition animation the occurs when dismissing the landing page.
         */
        "disableTransition"?: boolean;
        /**
          * Add sign in functionality. Requires portal and oauthappid props.
         */
        "enableSignIn"?: boolean;
        /**
          * Scale of the entry button.
         */
        "entryButtonScale"?: 's' | 'm' | 'l';
        /**
          * Button text which closes/dismisses the landing page.
         */
        "entryButtonText"?: string;
        /**
          * Font family to use for text
         */
        "fontFamily"?: string;
        /**
          * Image/graphic that is positioned near the text content.
         */
        "iconImage"?: string;
        /**
          * Alternate text for `iconImage`.
         */
        "iconImageAltText"?: string;
        /**
          * Scale of icon image/graphic.
         */
        "iconImageScale"?: 's' | 'm' | 'l';
        /**
          * The registered application id, used to setup sign in capabilities.
         */
        "oauthappid": string;
        /**
          * Emits when the landing page is closed.
         */
        "onLandingPageClose"?: (event: InstantAppsLandingPageCustomEvent<void>) => void;
        /**
          * Emits when the landing page is opened.
         */
        "onLandingPageOpen"?: (event: InstantAppsLandingPageCustomEvent<void>) => void;
        /**
          * Controls the open/close state of the landing page.
         */
        "open"?: boolean;
        /**
          * The apps Portal, used to setup sign in capabilities.
         */
        "portal"?: IPortal;
        /**
          * Subtitle text.
         */
        "subtitleText"?: string;
        /**
          * Title text.
         */
        "titleText": string;
    }
    interface InstantAppsLanguageSwitcher {
        /**
          * Defines the default language of the language switcher dropdown. Set internally if not defined.
         */
        "defaultLocale"?: string;
        /**
          * Icon to display.
         */
        "icon"?: string;
        /**
          * Data used to populate language switcher dropdown.
         */
        "locales"?: { locale: string; webmap?: string }[];
        /**
          * Fires when a language is selected from the dropdown. This event will emit an object containing the information on the selected language and a flat object of unique identifiers and their associated values.
         */
        "onSelectedLanguageUpdated"?: (event: InstantAppsLanguageSwitcherCustomEvent<{
    locale: string;
    data?: {
      [key: string]: string;
    };
  }>) => void;
        /**
          * Instant App portal item - used to fetch it's associated portal item resource. The portal item resource will contain the user defined translated strings.
         */
        "portalItem": __esri.PortalItem;
        /**
          * Reference to map view to switch web maps if present in locales.
         */
        "view"?: __esri.MapView | __esri.SceneView;
    }
    interface InstantAppsLanguageTranslator {
        /**
          * Object used to render each `instant-apps-translator-item`, containing either a `calcite-input` or rich text editor (handles HTML formatting); and, the languages to translate within the dropdown.
         */
        "appSettings"?: AppSettings;
        /**
          * Specified languages that the user-defined strings will be translated in.
         */
        "locales"?: LocaleItem[];
        /**
          * Fires when a translation input's value has changed.
         */
        "onTranslatorDataUpdated"?: (event: InstantAppsLanguageTranslatorCustomEvent<string>) => void;
        /**
          * Controls the open/close state of the modal.
         */
        "open"?: boolean;
        /**
          * Instant App portal item - used to fetch it's associated portal item resource. The portal item resource will contain the user-defined translated strings.
         */
        "portalItem": __esri.PortalItem;
        /**
          * Function that is called when the value in a translated locale's input has changed. This function will have 4 arguments - fieldName, value, locale, and resource - and will return a promise. The callback function can be used to construct the data of key-value pairs that will be written to the portal item resource.
         */
        "translatedLocaleInputOnChangeCallback"?: (fieldName: string, value: string, locale: string, resource: __esri.PortalItemResource) => Promise<void>;
        /**
          * Function to be called when the value in a user locale input has changed. This function will have 2 arguments - fieldName and value - and will return a promise.
         */
        "userLocaleInputOnChangeCallback"?: (fieldName: string, value: string) => Promise<void>;
    }
    interface InstantAppsLanguageTranslatorItem {
        /**
          * Unique identifier tied to an associated setting in an app.
         */
        "fieldName"?: string;
        /**
          * Fires when a translation input's value has changed.
         */
        "onTranslatorItemDataUpdated"?: (event: InstantAppsLanguageTranslatorItemCustomEvent<void>) => void;
        /**
          * Object containing data that describes the UI i.e. icon to indicate type of setting, label, value, etc.
         */
        "setting"?: LocaleSettingData;
        /**
          * Object containing labels of items in currently selected language.
         */
        "translatedLanguageLabels"?: { [key: string]: string };
        /**
          * Function that is called when the value in a translated locale's input has changed. This function will have 4 arguments - fieldName, value, locale, and resource - and will return a promise. The callback function can be used to construct the data of key-value pairs that will be written to the portal item resource.
         */
        "translatedLocaleInputOnChangeCallback"?: (fieldName: string, value: string, locale: string, resource: __esri.PortalItemResource) => Promise<void>;
        /**
          * Function to be called when the value in a user locale input has changed. This function will have 2 arguments - fieldName and value - and will return a promise.
         */
        "userLocaleInputOnChangeCallback"?: (fieldName: string, value: string) => Promise<void>;
    }
    interface InstantAppsLanguageTranslatorSearch {
        "onSuggestionSelected"?: (event: InstantAppsLanguageTranslatorSearchCustomEvent<string>) => void;
        /**
          * Placeholder string for search input.
         */
        "t9nPlaceholder"?: string;
    }
    interface InstantAppsMeasurement {
        /**
          * Determine the tool that will be open on load
         */
        "activeToolType"?: ActiveTool;
        /**
          * Choose which unit will be used for the area tool by default
         */
        "areaUnit"?: __esri.AreaUnit;
        /**
          * When true the measure widget is closable
         */
        "closable"?: boolean;
        /**
          * Choose which formats to include as options while converting coordinates
         */
        "coordinateFormat"?: string;
        /**
          * Choose which unit will be used for the distance tool by default
         */
        "linearUnit"?: __esri.LengthUnit;
        /**
          * Emits when there is an active measure tool to allow app devs to disable other tools/popups when tools are active .
         */
        "onMeasureActive"?: (event: InstantAppsMeasurementCustomEvent<boolean>) => void;
        /**
          * A reference to the MapView or SceneView
         */
        "view"?: __esri.MapView | __esri.SceneView;
    }
    interface InstantAppsMeasurementTool {
        "activeTool"?: ActiveTool;
        "measureConfiguration"?: IMeasureConfiguration;
        "view"?: __esri.MapView | __esri.SceneView;
    }
    interface InstantAppsPopover {
        "content"?: string;
        "disableAction"?: boolean;
        "imgAlt"?: string;
        "imgSrc"?: string;
        "index"?: number;
        "mediaSrc"?: string;
        "messageOverrides"?: InstantAppsPopoverMessageOverrides;
        "pagination"?: boolean;
        "parent"?: InstantAppsPopovers;
        "placement"?: LogicalPlacement;
        "popoverAction"?: (event: MouseEvent) => void;
        "popoverTitle"?: string;
        "refId"?: string;
        "referenceElement"?: string | HTMLElement;
        "subtitle"?: string;
    }
    interface InstantAppsPopovers {
        "beforeOpen"?: () => Promise<void>;
        "currentId"?: string;
        "inTour"?: boolean;
        "instantAppsPopovers"?: Map<string, HTMLInstantAppsPopoverElement>;
    }
    interface InstantAppsScoreboard {
        /**
          * Controls the behavior to auto dock the scoreboard to the bottom in smaller parent containers/mobile devices.
         */
        "autoDockEnabled"?: boolean;
        /**
          * Optional geometry in which the statistics will be calculated. To re-calculate the scoreboard's statistics based on the current view extent, set this property to `null`.
         */
        "geometry"?: __esri.Geometry | null;
        /**
          * Number of scoreboard items that can be viewed at a time. Minimum: 2, Maximum : 6.
         */
        "itemLimit"?: number;
        /**
          * Data on layers, field attribute info, operations, for each scoreboard item
         */
        "items"?: ScoreboardItem[];
        /**
          * Mode of scoreboard i.e. 'floating' or 'pinned'.
         */
        "mode"?: ScoreboardMode;
        /**
          * Emits when scoreboard item values have been calculated and updated.
         */
        "onScoreboardItemsUpdated"?: (event: InstantAppsScoreboardCustomEvent<ScoreboardItem[]>) => void;
        /**
          * Position of scoreboard i.e. 'bottom', 'left', or 'right'.
         */
        "position"?: ScoreboardPosition;
        /**
          * MapView or SceneView to reference extent, viewpoint, and layers in map to perform calculations.
         */
        "view"?: __esri.MapView | __esri.SceneView;
    }
    interface InstantAppsSignIn {
        "closeLandingPage"?: Function;
        /**
          * Landing page description text.
         */
        "descriptionText"?: string;
        /**
          * Set to `true` if app has landing page
         */
        "landingPage"?: boolean;
        /**
          * The registered application id, used to setup sign in capabilities.
         */
        "oauthappid": string;
        /**
          * Set to true to show the OAuth sign-in page in a popup window.
         */
        "openInPopup"?: boolean;
        /**
          * The apps Portal, used to setup sign in capabilities.
         */
        "portal": IPortal;
        /**
          * Landing page subtitle text.
         */
        "subtitleText"?: string;
        /**
          * Landing page title text.
         */
        "titleText"?: string;
        /**
          * Pick the look of the sign in/out component. `navigation` will put sign out in calcite-navigation-user. `avatar` will put sign out in calcite-avatar. `landingPage` is used for instant-apps-landing-page.
         */
        "type"?: 'navigation' | 'avatar' | 'landingPage';
    }
    interface InstantAppsSocialShare {
        /**
          * Auto update share URL.
         */
        "autoUpdateShareUrl"?: boolean;
        /**
          * Configure the default URL parameters that are appended to the generated share URL.
         */
        "defaultUrlParams"?: { center?: boolean; level?: boolean; viewpoint?: boolean; selectedFeature?: boolean; hiddenLayers?: boolean } | null;
        /**
          * Show/hide the tip text below the share options.
         */
        "displayTipText"?: boolean;
        /**
          * Show/hide the embed UI.
         */
        "embed"?: boolean;
        /**
          * Text to nest in embed iframe code.
         */
        "iframeInnerText"?: string;
        /**
          * Configures the placement of the success message popover for the 'Copy Link' button. See options here: https://github.com/Esri/calcite-components/blob/v1.0.0-beta.83/src/utils/popper.ts#L34
         */
        "inlineSuccessPopoverPlacement"?: LogicalPlacement;
        /**
          * Renders tool as a popover with a trigger button, or inline to place in a custom container.
         */
        "mode"?: 'popover' | 'inline';
        /**
          * Adjusts the scale of the popover button icon.
         */
        "popoverButtonIconScale"?: 's' | 'm' | 'l';
        /**
          * Adjusts the scale of the component.
         */
        "scale"?: 's' | 'm' | 'l';
        "shareButtonColor"?: 'inverse' | 'neutral';
        /**
          * Adjust scale of popover button
         */
        "shareButtonScale"?: 's' | 'm' | 'l';
        /**
          * Renders tool in popover mode with a trigger button or action
         */
        "shareButtonType"?: 'button' | 'action';
        /**
          * Display the share icons in a vertical or horizontal layout.
         */
        "shareIconsLayout"?: 'vertical' | 'horizontal';
        "shareText"?: string;
        /**
          * Generated share URL. Use this property to append custom URL parameters if needed.
         */
        "shareUrl"?: string;
        /**
          * Shortens generated URL.
         */
        "shortenShareUrl"?: boolean;
        /**
          * Show/hide social media icons.
         */
        "socialMedia"?: boolean;
        /**
          * Provides an alternate to the success.url message "App URL copied to clipboard."
         */
        "successMessage"?: string;
        /**
          * MapView or SceneView to reference when URL parameter values are generated, i.e. center, level, viewpoint, etc.
         */
        "view"?: __esri.MapView | __esri.SceneView;
    }
    interface InstantAppsSplash {
        /**
          * When `true`, disables the component's close button.
         */
        "closeButtonDisabled"?: boolean;
        /**
          * Content of splash screen.
         */
        "content"?: string;
        /**
          * Local storage key used to determine whether or not user has opted into "Don't show this again" checkbox.
         */
        "localStorageKey": string;
        /**
          * Emits when the splash modal is closed.
         */
        "onSplashClose"?: (event: InstantAppsSplashCustomEvent<void>) => void;
        /**
          * Controls the 'open' state of the modal element.
         */
        "open"?: boolean;
        /**
          * When `true`, disables the closing of the component when clicked outside.
         */
        "outsideCloseDisabled"?: boolean;
        /**
          * Primary button text.
         */
        "primaryButtonText"?: string;
        /**
          * When `true`, enables a secondary button at the component's footer.
         */
        "secondaryButton"?: boolean;
        /**
          * Callback function when secondary button is clicked.
         */
        "secondaryButtonCallback"?: () => Promise<void>;
        /**
          * Secondary button icon.
         */
        "secondaryButtonIcon"?: string;
        /**
          * Secondary button text.
         */
        "secondaryButtonText"?: string;
        /**
          * Title of splash screen.
         */
        "titleText"?: string;
    }
    interface IntrinsicElements {
        "instant-apps-ckeditor-wrapper": InstantAppsCkeditorWrapper;
        "instant-apps-control-panel": InstantAppsControlPanel;
        "instant-apps-export": InstantAppsExport;
        "instant-apps-filter-list": InstantAppsFilterList;
        "instant-apps-header": InstantAppsHeader;
        "instant-apps-interactive-legend": InstantAppsInteractiveLegend;
        "instant-apps-interactive-legend-classic": InstantAppsInteractiveLegendClassic;
        "instant-apps-interactive-legend-count": InstantAppsInteractiveLegendCount;
        "instant-apps-interactive-legend-group-legend-element": InstantAppsInteractiveLegendGroupLegendElement;
        "instant-apps-interactive-legend-group-legend-element-caption": InstantAppsInteractiveLegendGroupLegendElementCaption;
        "instant-apps-interactive-legend-layer-element": InstantAppsInteractiveLegendLayerElement;
        "instant-apps-interactive-legend-layer-element-caption": InstantAppsInteractiveLegendLayerElementCaption;
        "instant-apps-interactive-legend-legend-element": InstantAppsInteractiveLegendLegendElement;
        "instant-apps-interactive-legend-legend-element-caption": InstantAppsInteractiveLegendLegendElementCaption;
        "instant-apps-interactive-legend-relationship": InstantAppsInteractiveLegendRelationship;
        "instant-apps-keyboard-shortcuts": InstantAppsKeyboardShortcuts;
        "instant-apps-landing-page": InstantAppsLandingPage;
        "instant-apps-language-switcher": InstantAppsLanguageSwitcher;
        "instant-apps-language-translator": InstantAppsLanguageTranslator;
        "instant-apps-language-translator-item": InstantAppsLanguageTranslatorItem;
        "instant-apps-language-translator-search": InstantAppsLanguageTranslatorSearch;
        "instant-apps-measurement": InstantAppsMeasurement;
        "instant-apps-measurement-tool": InstantAppsMeasurementTool;
        "instant-apps-popover": InstantAppsPopover;
        "instant-apps-popovers": InstantAppsPopovers;
        "instant-apps-scoreboard": InstantAppsScoreboard;
        "instant-apps-sign-in": InstantAppsSignIn;
        "instant-apps-social-share": InstantAppsSocialShare;
        "instant-apps-splash": InstantAppsSplash;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "instant-apps-ckeditor-wrapper": LocalJSX.InstantAppsCkeditorWrapper & JSXBase.HTMLAttributes<HTMLInstantAppsCkeditorWrapperElement>;
            "instant-apps-control-panel": LocalJSX.InstantAppsControlPanel & JSXBase.HTMLAttributes<HTMLInstantAppsControlPanelElement>;
            "instant-apps-export": LocalJSX.InstantAppsExport & JSXBase.HTMLAttributes<HTMLInstantAppsExportElement>;
            "instant-apps-filter-list": LocalJSX.InstantAppsFilterList & JSXBase.HTMLAttributes<HTMLInstantAppsFilterListElement>;
            "instant-apps-header": LocalJSX.InstantAppsHeader & JSXBase.HTMLAttributes<HTMLInstantAppsHeaderElement>;
            "instant-apps-interactive-legend": LocalJSX.InstantAppsInteractiveLegend & JSXBase.HTMLAttributes<HTMLInstantAppsInteractiveLegendElement>;
            "instant-apps-interactive-legend-classic": LocalJSX.InstantAppsInteractiveLegendClassic & JSXBase.HTMLAttributes<HTMLInstantAppsInteractiveLegendClassicElement>;
            "instant-apps-interactive-legend-count": LocalJSX.InstantAppsInteractiveLegendCount & JSXBase.HTMLAttributes<HTMLInstantAppsInteractiveLegendCountElement>;
            "instant-apps-interactive-legend-group-legend-element": LocalJSX.InstantAppsInteractiveLegendGroupLegendElement & JSXBase.HTMLAttributes<HTMLInstantAppsInteractiveLegendGroupLegendElementElement>;
            "instant-apps-interactive-legend-group-legend-element-caption": LocalJSX.InstantAppsInteractiveLegendGroupLegendElementCaption & JSXBase.HTMLAttributes<HTMLInstantAppsInteractiveLegendGroupLegendElementCaptionElement>;
            "instant-apps-interactive-legend-layer-element": LocalJSX.InstantAppsInteractiveLegendLayerElement & JSXBase.HTMLAttributes<HTMLInstantAppsInteractiveLegendLayerElementElement>;
            "instant-apps-interactive-legend-layer-element-caption": LocalJSX.InstantAppsInteractiveLegendLayerElementCaption & JSXBase.HTMLAttributes<HTMLInstantAppsInteractiveLegendLayerElementCaptionElement>;
            "instant-apps-interactive-legend-legend-element": LocalJSX.InstantAppsInteractiveLegendLegendElement & JSXBase.HTMLAttributes<HTMLInstantAppsInteractiveLegendLegendElementElement>;
            "instant-apps-interactive-legend-legend-element-caption": LocalJSX.InstantAppsInteractiveLegendLegendElementCaption & JSXBase.HTMLAttributes<HTMLInstantAppsInteractiveLegendLegendElementCaptionElement>;
            "instant-apps-interactive-legend-relationship": LocalJSX.InstantAppsInteractiveLegendRelationship & JSXBase.HTMLAttributes<HTMLInstantAppsInteractiveLegendRelationshipElement>;
            "instant-apps-keyboard-shortcuts": LocalJSX.InstantAppsKeyboardShortcuts & JSXBase.HTMLAttributes<HTMLInstantAppsKeyboardShortcutsElement>;
            "instant-apps-landing-page": LocalJSX.InstantAppsLandingPage & JSXBase.HTMLAttributes<HTMLInstantAppsLandingPageElement>;
            "instant-apps-language-switcher": LocalJSX.InstantAppsLanguageSwitcher & JSXBase.HTMLAttributes<HTMLInstantAppsLanguageSwitcherElement>;
            "instant-apps-language-translator": LocalJSX.InstantAppsLanguageTranslator & JSXBase.HTMLAttributes<HTMLInstantAppsLanguageTranslatorElement>;
            "instant-apps-language-translator-item": LocalJSX.InstantAppsLanguageTranslatorItem & JSXBase.HTMLAttributes<HTMLInstantAppsLanguageTranslatorItemElement>;
            "instant-apps-language-translator-search": LocalJSX.InstantAppsLanguageTranslatorSearch & JSXBase.HTMLAttributes<HTMLInstantAppsLanguageTranslatorSearchElement>;
            "instant-apps-measurement": LocalJSX.InstantAppsMeasurement & JSXBase.HTMLAttributes<HTMLInstantAppsMeasurementElement>;
            "instant-apps-measurement-tool": LocalJSX.InstantAppsMeasurementTool & JSXBase.HTMLAttributes<HTMLInstantAppsMeasurementToolElement>;
            "instant-apps-popover": LocalJSX.InstantAppsPopover & JSXBase.HTMLAttributes<HTMLInstantAppsPopoverElement>;
            "instant-apps-popovers": LocalJSX.InstantAppsPopovers & JSXBase.HTMLAttributes<HTMLInstantAppsPopoversElement>;
            "instant-apps-scoreboard": LocalJSX.InstantAppsScoreboard & JSXBase.HTMLAttributes<HTMLInstantAppsScoreboardElement>;
            "instant-apps-sign-in": LocalJSX.InstantAppsSignIn & JSXBase.HTMLAttributes<HTMLInstantAppsSignInElement>;
            "instant-apps-social-share": LocalJSX.InstantAppsSocialShare & JSXBase.HTMLAttributes<HTMLInstantAppsSocialShareElement>;
            "instant-apps-splash": LocalJSX.InstantAppsSplash & JSXBase.HTMLAttributes<HTMLInstantAppsSplashElement>;
        }
    }
}
